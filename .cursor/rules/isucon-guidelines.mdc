---
alwaysApply: true
description: ISUCON特化の開発・パフォーマンス分析ガイドライン
---

# ISUCON 開発ガイドライン

## pprotein ツールの活用

### プロファイリング戦略
1. **ベースライン計測**: 最初に現状のパフォーマンスを記録
2. **継続的計測**: 改善前後で必ず比較測定
3. **多角的分析**: CPU、メモリ、I/O、SQLの全方位で分析

### データ収集のタイミング
- **初期分析**: アプリ起動直後の安定状態
- **負荷時分析**: ベンチマーク実行中
- **改善検証**: コード変更後の効果測定

## パフォーマンス分析のポイント

### pprofによるCPU分析
[internal/pprof/](mdc:internal/pprof/)機能の活用：

1. **ホットスポット特定**: CPU使用率の高い関数を洗い出し
2. **アロケーション分析**: 不要なメモリ確保を削減
3. **ゴルーチン分析**: 並行処理のボトルネックを特定

### HTTPログ分析（alp統合）
[internal/extproc/alp/](mdc:internal/extproc/alp/)の活用パターン：

```bash
# 遅いエンドポイントTOP10を特定
alp ltsv --file access.log --sort avg -r | head -10

# 特定パスのレスポンス時間分布
alp ltsv --file access.log --filter 'Path matches "/api/users"'
```

### MySQLスローログ分析
[internal/extproc/slp/](mdc:internal/extproc/slp/)での分析指針：

1. **実行時間**: 1秒以上のクエリを優先分析
2. **実行回数**: 頻繁に実行される軽いクエリも要注意
3. **インデックス**: EXPLAINでアクセスパターンを確認

## ISUCON典型的な最適化

### データベース最適化
- **インデックス設計**: WHERE, ORDER BY, JOIN条件に適切なインデックス
- **クエリ最適化**: N+1問題の解消、バッチ処理の導入
- **接続プール**: コネクション数の適切な設定

### アプリケーション最適化
- **キャッシュ戦略**: メモリキャッシュ、Redis等の活用
- **JSON処理**: [github.com/goccy/go-json](mdc:go.mod)の高速ライブラリ使用
- **並行処理**: CPUバウンドなタスクのgoroutine活用

### システム最適化
- **ファイルI/O**: バッファリング、シーケンシャルアクセス
- **ネットワーク**: Keep-alive、HTTP/2の活用
- **リソース管理**: ulimit設定、カーネルパラメータ調整

## デバッグ・分析ワークフロー

### 問題特定の手順
1. **症状の確認**: レスポンス時間、エラー率、スループット
2. **仮説立案**: CPU/メモリ/I/O/SQLのどこがボトルネック？
3. **計測実行**: pproteinで詳細データを収集
4. **根本原因**: プロファイルデータから具体的な問題箇所を特定
5. **改善実装**: 最も効果の高い箇所から修正
6. **効果検証**: 改善前後の比較でROIを確認

### プロファイリングのベストプラクティス
- **統計的有意性**: 複数回計測して平均を取る
- **環境一致**: 本番環境に近い条件で測定
- **段階的改善**: 一度に複数箇所を変更しない
- **リグレッション**: 改善が他の部分に悪影響を与えていないか確認

## チーム協働

### データ共有
- pproteinのグループ機能で計測結果を共有
- [internal/memo/](mdc:internal/memo/)で分析結果をメモ化
- Gitコミットと紐付けた改善履歴の管理

### 役割分担
- **アプリ担当**: コードレベルの最適化
- **DB担当**: スキーマ設計、クエリ最適化
- **インフラ担当**: システム設定、リソース最適化

## 注意事項

### やってはいけないこと
- **推測による最適化**: 計測なしの感覚的な改善
- **過早な最適化**: プロファイル結果を無視した局所最適化
- **一点集中**: 特定の箇所のみに固執する改善

### 必ずやること
- **改善前後の計測**: 効果を数値で確認
- **全体スコアの監視**: 局所改善が全体に与える影響
- **安定性の確認**: パフォーマンス向上と引き換えの信頼性低下を防ぐ